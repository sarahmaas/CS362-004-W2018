____________________________________________________
Testing isGameOver()

	No provinces left:
		Test successfully completed.
	First 3 empty piles:
		Test successfully completed.
	Last 3 empty piles:
		Test failed.
____________________________________________________
____________________________________________________
Testing kingdomCards()

	test position 0:
		Test successfully completed.
	test position 1:
		Test successfully completed.
	test position 2:
		Test successfully completed.
	test position 3:
		Test successfully completed.
	test position 4:
		Test successfully completed.
	test position 5:
		Test successfully completed.
	test position 6:
		Test successfully completed.
	test position 7:
		Test successfully completed.
	test position 8:
		Test successfully completed.
	test position 9:
		Test successfully completed.
____________________________________________________
____________________________________________________
Testing getCost()

	curse cost:
		Test successfully completed.
	curse cost:
		Test successfully completed.
	estate cost:
		Test successfully completed.
	duchy cost:
		Test successfully completed.
	province cost:
		Test successfully completed.
	copper cost:
		Test successfully completed.
	silver cost:
		Test successfully completed.
	gold cost:
		Test successfully completed.
	adventurer cost:
		Test successfully completed.
	council_room cost:
		Test successfully completed.
	feast cost:
		Test successfully completed.
	gardens cost:
		Test successfully completed.
	mine cost:
		Test successfully completed.
	remodel cost:
		Test successfully completed.
	smithy cost:
		Test successfully completed.
	village cost:
		Test successfully completed.
	baron cost:
		Test successfully completed.
	great_hall cost:
		Test successfully completed.
	minion cost:
		Test successfully completed.
	steward cost:
		Test successfully completed.
	tribute cost:
		Test successfully completed.
	ambassador cost:
		Test successfully completed.
	cutpurse cost:
		Test successfully completed.
	embargo cost:
		Test successfully completed.
	outpost cost:
		Test successfully completed.
	salvager cost:
		Test successfully completed.
	sea_hag cost:
		Test successfully completed.
	treasure_map cost:
		Test successfully completed.
	other cost:
		Test successfully completed.
____________________________________________________
____________________________________________________
Testing supplyCount()

	Supply count card supply stack 1:
		Test successfully completed.
	Supply count card supply stack 2:
		Test successfully completed.
	Supply count card supply stack 3:
		Test successfully completed.
	Supply count card supply stack 4:
		Test successfully completed.
	Supply count card supply stack 5:
		Test successfully completed.
	Supply count card supply stack 6:
		Test successfully completed.
	Supply count card supply stack 7:
		Test successfully completed.
	Supply count card supply stack 8:
		Test successfully completed.
	Supply count card supply stack 9:
		Test successfully completed.
	Supply count card supply stack 10:
		Test successfully completed.
	Supply count card supply stack 11:
		Test successfully completed.
	Supply count card supply stack 12:
		Test successfully completed.
	Supply count card supply stack 13:
		Test successfully completed.
	Supply count card supply stack 14:
		Test successfully completed.
	Supply count card supply stack 15:
		Test successfully completed.
	Supply count card supply stack 16:
		Test successfully completed.
	Supply count card supply stack 17:
		Test successfully completed.
	Supply count card supply stack 18:
		Test successfully completed.
	Supply count card supply stack 19:
		Test successfully completed.
	Supply count card supply stack 20:
		Test successfully completed.
	Supply count card supply stack 21:
		Test successfully completed.
	Supply count card supply stack 22:
		Test successfully completed.
	Supply count card supply stack 23:
		Test successfully completed.
	Supply count card supply stack 24:
		Test successfully completed.
	Supply count card supply stack 25:
		Test successfully completed.
	Supply count card supply stack 26:
		Test successfully completed.
	Supply count card supply stack 27:
		Test successfully completed.
____________________________________________________
____________________________________________________
Testing smithy card

	play smithy successfully executes:
		Test successfully completed.
	correct number of cards in hand:
		Test successfully completed.
	correct number of cards in deck:
		Test failed.
____________________________________________________
____________________________________________________
Testing adventurer card

	play adventurer successfully executes:
		Test successfully completed.
	correct number of cards in hand:
		Test successfully completed.
____________________________________________________
____________________________________________________
Testing embargo card

	play embargo successfully executes:
		Test successfully completed.
	correct number of embargo tokens:
		Test successfully completed.
	correct number of cards in hand:
		Test successfully completed.
	correct number of coins:
		Test successfully completed.
____________________________________________________
____________________________________________________
Testing great hall card

	play great hall successfully executes:
		Test successfully completed.
	correct number of cards in hand:
		Test successfully completed.
	correct number of actions:
		Test successfully completed.
____________________________________________________
File 'unittest1.c'
Lines executed:100.00% of 33
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 21
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:// testing isGameOver() function
        -:    8:
        -:    9:void asserttrue(int statement);
        -:   10:
        -:   11:
function main called 4 returned 100% blocks executed 100%
        4:   12:int main(int argc, char* argv[]) {
        4:   13:    char functionName[] = "isGameOver()";
        -:   14:    struct gameState state;
        4:   15:    int players = 2;
        4:   16:    int seed = 100;
        4:   17:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   18:		sea_hag, tribute, smithy};
        4:   19:	printf("____________________________________________________\n");
call    0 returned 100%
        4:   20:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        4:   21:	fflush(stdout);
call    0 returned 100%
        -:   22:    
        -:   23:    // init game
        4:   24:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   25:    
        -:   26:	// conditions that must be true, one or the other:
        -:   27:	//   province count must be zero
        -:   28:	//   3 supply piles are at zero
        -:   29:
        -:   30:    // test province count
        4:   31:    state.supplyCount[province] = 0; 
        4:   32:    printf("\tNo provinces left:\n");
call    0 returned 100%
        4:   33:    fflush(stdout);
call    0 returned 100%
        4:   34:    asserttrue(isGameOver(&state));
call    0 returned 100%
call    1 returned 100%
        -:   35:
        -:   36:    // reset changes
        4:   37:    state.supplyCount[province] = 1;
        -:   38:
        -:   39:    // test supply pile count
        -:   40:    // set 3 to 0, set rest to more
        -:   41:    // from enum CARD in dominion.h
        -:   42:    int card;
      112:   43:    for(card = curse; card <= treasure_map; card++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      108:   44:        state.supplyCount[card] = ((card < 3) ? 0 : 5);
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:   45:        //printf("Testing test: %d\n", state.supplyCount[card]);
        -:   46:    }
        4:   47:    printf("\tFirst 3 empty piles:\n");
call    0 returned 100%
        4:   48:    fflush(stdout);    
call    0 returned 100%
        4:   49:    asserttrue(isGameOver(&state));	
call    0 returned 100%
call    1 returned 100%
        -:   50:
      112:   51:    for(card = curse; card <= treasure_map; card++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      108:   52:        state.supplyCount[card] = ((card > treasure_map - 3) ? 0 : 5);
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:   53:        //printf("Testing test: %d\n", state.supplyCount[card]);
        -:   54:    }
        4:   55:    printf("\tLast 3 empty piles:\n");
call    0 returned 100%
        4:   56:    fflush(stdout);    
call    0 returned 100%
        4:   57:    asserttrue(isGameOver(&state));	
call    0 returned 100%
call    1 returned 100%
        -:   58:
        4:   59:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   60:	
        4:   61:    return 0;
        -:   62:}
        -:   63:
        -:   64:
        -:   65:
        -:   66:// adding own asserttrue as recommended
function asserttrue called 12 returned 100% blocks executed 100%
       12:   67:void asserttrue(int statement) {
       12:   68:    if (statement) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        8:   69:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
        8:   70:        fflush(stdout);
call    0 returned 100%
        -:   71:    } else {
        4:   72:        printf("\t\tTest failed.\n");
call    0 returned 100%
        4:   73:        fflush(stdout);
call    0 returned 100%
        -:   74:    }
       12:   75:}
File 'unittest2.c'
Lines executed:90.00% of 20
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:83.33% of 12
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:// testing kingdomCards() function
        -:    8:
        -:    9:void asserttrue(int statement);
        -:   10:
        -:   11:
function main called 3 returned 100% blocks executed 100%
        3:   12:int main(int argc, char* argv[]) {
        3:   13:    char functionName[] = "kingdomCards()";
        3:   14:	int control[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        3:   15:	printf("____________________________________________________\n");
call    0 returned 100%
        3:   16:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        3:   17:	fflush(stdout);
call    0 returned 100%
        -:   18:
        -:   19:    // What is the expected behavior??
        -:   20:    //  returns an int array that matches what was given
        3:   21:    int* test = kingdomCards(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
call    0 returned 100%
        -:   22:    // test all positions
        -:   23:    int i;
       33:   24:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       30:   25:        printf("\ttest position %d:\n", i);
call    0 returned 100%
       30:   26:        fflush(stdout);
call    0 returned 100%
       30:   27:        asserttrue(control[i] == *(test + i));  
call    0 returned 100%
        -:   28:    }
        -:   29:    
        -:   30:
        3:   31:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   32:	
        3:   33:    return 0;
        -:   34:}
        -:   35:
        -:   36:
        -:   37:
        -:   38:// adding own asserttrue as recommended
function asserttrue called 30 returned 100% blocks executed 67%
       30:   39:void asserttrue(int statement) {
       30:   40:    if (statement) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       30:   41:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
       30:   42:        fflush(stdout);
call    0 returned 100%
        -:   43:    } else {
    #####:   44:        printf("\t\tTest failed.\n");
call    0 never executed
    #####:   45:        fflush(stdout);
call    0 never executed
        -:   46:    }
       30:   47:}
File 'unittest3.c'
Lines executed:97.22% of 72
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:97.89% of 95
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:// testing getCost() function
        -:    8:
        -:    9:void asserttrue(int statement);
        -:   10:
        -:   11:
function main called 3 returned 100% blocks executed 100%
        3:   12:int main(int argc, char* argv[]) {
        3:   13:    char functionName[] = "getCost()";
        3:   14:	printf("____________________________________________________\n");
call    0 returned 100%
        3:   15:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        3:   16:	fflush(stdout);
call    0 returned 100%
        -:   17:    
        -:   18:    // for all cards in enum CARD, costs should be:
        3:   19:    printf("\tcurse cost:\n");
call    0 returned 100%
        3:   20: 	asserttrue(getCost(curse) == 0);
call    0 returned 100%
call    1 returned 100%
        3:   21:    printf("\tcurse cost:\n");
call    0 returned 100%
        3:   22:    asserttrue(getCost(curse) == 0);
call    0 returned 100%
call    1 returned 100%
        3:   23:    printf("\testate cost:\n");
call    0 returned 100%
        3:   24:    asserttrue(getCost(estate) == 2);
call    0 returned 100%
call    1 returned 100%
        3:   25:    printf("\tduchy cost:\n");
call    0 returned 100%
        3:   26:    asserttrue(getCost(duchy) == 5);
call    0 returned 100%
call    1 returned 100%
        3:   27:    printf("\tprovince cost:\n");
call    0 returned 100%
        3:   28:    asserttrue(getCost(province) == 8);
call    0 returned 100%
call    1 returned 100%
        3:   29:    printf("\tcopper cost:\n");
call    0 returned 100%
        3:   30:    asserttrue(getCost(copper) == 0);
call    0 returned 100%
call    1 returned 100%
        3:   31:    printf("\tsilver cost:\n");
call    0 returned 100%
        3:   32:    asserttrue(getCost(silver) == 3);
call    0 returned 100%
call    1 returned 100%
        3:   33:    printf("\tgold cost:\n");
call    0 returned 100%
        3:   34:    asserttrue(getCost(gold) == 6);
call    0 returned 100%
call    1 returned 100%
        3:   35:    printf("\tadventurer cost:\n");
call    0 returned 100%
        3:   36:    asserttrue(getCost(adventurer) == 6);
call    0 returned 100%
call    1 returned 100%
        3:   37:    printf("\tcouncil_room cost:\n");
call    0 returned 100%
        3:   38:    asserttrue(getCost(council_room) == 5);
call    0 returned 100%
call    1 returned 100%
        3:   39:    printf("\tfeast cost:\n");
call    0 returned 100%
        3:   40:    asserttrue(getCost(feast) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   41:    printf("\tgardens cost:\n");
call    0 returned 100%
        3:   42:    asserttrue(getCost(gardens) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   43:    printf("\tmine cost:\n");
call    0 returned 100%
        3:   44:    asserttrue(getCost(mine) == 5);
call    0 returned 100%
call    1 returned 100%
        3:   45:    printf("\tremodel cost:\n");
call    0 returned 100%
        3:   46:    asserttrue(getCost(remodel) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   47:    printf("\tsmithy cost:\n");
call    0 returned 100%
        3:   48:    asserttrue(getCost(smithy) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   49:    printf("\tvillage cost:\n");
call    0 returned 100%
        3:   50:    asserttrue(getCost(village) == 3);
call    0 returned 100%
call    1 returned 100%
        3:   51:    printf("\tbaron cost:\n");
call    0 returned 100%
        3:   52:    asserttrue(getCost(baron) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   53:    printf("\tgreat_hall cost:\n");
call    0 returned 100%
        3:   54:    asserttrue(getCost(great_hall) == 3);
call    0 returned 100%
call    1 returned 100%
        3:   55:    printf("\tminion cost:\n");
call    0 returned 100%
        3:   56:    asserttrue(getCost(minion) == 5);
call    0 returned 100%
call    1 returned 100%
        3:   57:    printf("\tsteward cost:\n");
call    0 returned 100%
        3:   58:    asserttrue(getCost(steward) == 3);
call    0 returned 100%
call    1 returned 100%
        3:   59:    printf("\ttribute cost:\n");
call    0 returned 100%
        3:   60:    asserttrue(getCost(tribute) == 5);
call    0 returned 100%
call    1 returned 100%
        3:   61:    printf("\tambassador cost:\n");
call    0 returned 100%
        3:   62:    asserttrue(getCost(ambassador) == 3);
call    0 returned 100%
call    1 returned 100%
        3:   63:    printf("\tcutpurse cost:\n");
call    0 returned 100%
        3:   64:    asserttrue(getCost(cutpurse) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   65:    printf("\tembargo cost:\n");
call    0 returned 100%
        3:   66:    asserttrue(getCost(embargo) == 2);
call    0 returned 100%
call    1 returned 100%
        3:   67:    printf("\toutpost cost:\n");
call    0 returned 100%
        3:   68:    asserttrue(getCost(outpost) == 5);
call    0 returned 100%
call    1 returned 100%
        3:   69:    printf("\tsalvager cost:\n");
call    0 returned 100%
        3:   70:    asserttrue(getCost(salvager) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   71:    printf("\tsea_hag cost:\n");
call    0 returned 100%
        3:   72:    asserttrue(getCost(sea_hag) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   73:    printf("\ttreasure_map cost:\n");
call    0 returned 100%
        3:   74:    asserttrue(getCost(treasure_map) == 4);
call    0 returned 100%
call    1 returned 100%
        3:   75:    printf("\tother cost:\n");
call    0 returned 100%
        3:   76:    asserttrue(getCost(treasure_map + 1) == -1);
call    0 returned 100%
call    1 returned 100%
        3:   77:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   78:	
        3:   79:    return 0;
        -:   80:}
        -:   81:
        -:   82:
        -:   83:// adding own asserttrue as recommended
function asserttrue called 87 returned 100% blocks executed 67%
       87:   84:void asserttrue(int statement) {
       87:   85:    if (statement) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       87:   86:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
       87:   87:        fflush(stdout);
call    0 returned 100%
        -:   88:    } else {
    #####:   89:        printf("\t\tTest failed.\n");
call    0 never executed
    #####:   90:        fflush(stdout);
call    0 never executed
        -:   91:    }
       87:   92:}
File 'unittest4.c'
Lines executed:90.91% of 22
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:83.33% of 12
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:// testing supplyCount() function
        -:    8:
        -:    9:void asserttrue(int statement);
        -:   10:
        -:   11:
function main called 3 returned 100% blocks executed 100%
        3:   12:int main(int argc, char* argv[]) {
        3:   13:    char functionName[] = "supplyCount()";
        -:   14:    struct gameState state;
        3:   15:    int players = 2;
        3:   16:    int seed = 100;
        3:   17:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   18:		sea_hag, tribute, smithy};
        3:   19:	printf("____________________________________________________\n");
call    0 returned 100%
        3:   20:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        3:   21:	fflush(stdout);
call    0 returned 100%
        -:   22:    
        -:   23:    // init game
        3:   24:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   25:
        -:   26:    // What is the expected behavior??
        -:   27:    //  returned value should match 
        -:   28:    
        -:   29:    // run for all supplies
        -:   30:    int i;
       84:   31:    for(i = 0; i < (treasure_map + 1); i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:   32:        state.supplyCount[i] = i + 2;
       81:   33:        printf("\tSupply count card supply stack %d:\n", i + 1);
call    0 returned 100%
       81:   34:        asserttrue(supplyCount(i, &state) == (i + 2));
call    0 returned 100%
call    1 returned 100%
        -:   35:    }
        -:   36:    
        3:   37:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   38:	
        3:   39:    return 0;
        -:   40:}
        -:   41:
        -:   42:
        -:   43:
        -:   44:// adding own asserttrue as recommended
function asserttrue called 81 returned 100% blocks executed 67%
       81:   45:void asserttrue(int statement) {
       81:   46:    if (statement) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       81:   47:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
       81:   48:        fflush(stdout);
call    0 returned 100%
        -:   49:    } else {
    #####:   50:        printf("\t\tTest failed.\n");
call    0 never executed
    #####:   51:        fflush(stdout);
call    0 never executed
        -:   52:    }
       81:   53:}
File 'cardtest1.c'
Lines executed:100.00% of 37
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 21
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "interface.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// testing smithy card
        -:    9:
        -:   10:void asserttrue(int statement);
        -:   11:
        -:   12:
function main called 3 returned 100% blocks executed 100%
        3:   13:int main(int argc, char* argv[]) {
        3:   14:    char functionName[] = "smithy card";
        -:   15:    struct gameState state;
        3:   16:    int players = 2;
        3:   17:    int seed = 100;
        3:   18:    int choice1 = 0;    // not used for smithy
        3:   19:    int choice2 = 0;    // not used for smithy
        3:   20:    int choice3 = 0;    // not used for smithy
        3:   21:    int handPos = 0;
        3:   22:    int bonus = 0;      // not used for smithy
        3:   23:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   24:		sea_hag, tribute, smithy};
        3:   25:	printf("____________________________________________________\n");
call    0 returned 100%
        3:   26:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        3:   27:	fflush(stdout);
call    0 returned 100%
        -:   28:    
        -:   29:    // init game
        3:   30:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   31:
        -:   32:    // What is the expected behavior??
        -:   33:    //  +3 cards...from the deck
        -:   34:    //  check that hand has increased and deck has decreased  
        -:   35:    //  card is discarded at the end, so net +2
        3:   36:    int handCountBefore = numHandCards(&state);
call    0 returned 100%
        3:   37:    int deckCountBefore = state.deckCount[0];
        -:   38:    // int discardCountBefore = state.discardCount[0];
        3:   39:    printf("\tplay smithy successfully executes:\n");
call    0 returned 100%
        3:   40:    fflush(stdout); 
call    0 returned 100%
        3:   41:    int played =  (cardEffect(smithy, choice1, choice2, choice3, &state, handPos, &bonus) == 0);
call    0 returned 100%
        3:   42:    asserttrue(played);
call    0 returned 100%
        3:   43:    int handCountAfter = numHandCards(&state);
call    0 returned 100%
        3:   44:    int deckCountAfter = state.deckCount[0];
        -:   45:    // int discardCountAfter = state.discardCount[0];
        -:   46:    
        3:   47:    printf("\tcorrect number of cards in hand:\n");
call    0 returned 100%
        3:   48:    fflush(stdout);     
call    0 returned 100%
        -:   49:    // 2 because + 3 and we played 1.
        3:   50:    asserttrue((handCountAfter - handCountBefore) == 2);
call    0 returned 100%
        -:   51:
        3:   52:    printf("\tcorrect number of cards in deck:\n");
call    0 returned 100%
        3:   53:    fflush(stdout);
call    0 returned 100%
        -:   54:    // 4 because we drew 3, would have to add for discard if 
        -:   55:    // that was being set - may be a bug for future investigation
        3:   56:    asserttrue((deckCountBefore - deckCountAfter) == 4);
call    0 returned 100%
        -:   57:
        3:   58:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   59:	
        3:   60:    return 0;
        -:   61:}
        -:   62:
        -:   63:
        -:   64:
        -:   65:// adding own asserttrue as recommended
function asserttrue called 9 returned 100% blocks executed 100%
        9:   66:void asserttrue(int statement) {
        9:   67:    if (statement) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        6:   68:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
        6:   69:        fflush(stdout);
call    0 returned 100%
        -:   70:    } else {
        3:   71:        printf("\t\tTest failed.\n");
call    0 returned 100%
        3:   72:        fflush(stdout);
call    0 returned 100%
        -:   73:    }
        9:   74:}
File 'cardtest2.c'
Lines executed:95.12% of 41
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:89.47% of 19
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "interface.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// testing adventurer card
        -:    9:
        -:   10:void asserttrue(int statement);
        -:   11:int countDeckTreasure(struct gameState *state);
        -:   12:
function main called 2 returned 100% blocks executed 100%
        2:   13:int main(int argc, char* argv[]) {
        2:   14:    char functionName[] = "adventurer card";
        -:   15:    struct gameState state;
        -:   16:    struct gameState control;
        2:   17:    int players = 2;
        2:   18:    int seed = 100;
        2:   19:    int choice1 = 0;    // not used for adventurer
        2:   20:    int choice2 = 0;    // not used for adventurer
        2:   21:    int choice3 = 0;    // not used for adventurer
        2:   22:    int handPos = 0;    // not used for adventurer
        2:   23:    int bonus = 0;      // not used for adventurer
        2:   24:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   25:		sea_hag, tribute, smithy};
        2:   26:	printf("____________________________________________________\n");
call    0 returned 100%
        2:   27:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        2:   28:	fflush(stdout);
call    0 returned 100%
        -:   29:    
        -:   30:    // init game
        2:   31:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        2:   32:    memcpy(&control, &state, sizeof(struct gameState));
        -:   33:    // What is the expected behavior??
        -:   34:    //  +2 treasure if they exist
        -:   35:    // from end of hand, draw cards and add to discard until 2 treasures reached
        -:   36:    
        -:   37:    // save cards from hand prior
        -:   38:    // test cards in hand for correctness
        -:   39:    // test cards in discard for correctness
        -:   40:    // int currentPlayer = whoseTurn(&state);
        -:   41:    // int handBefore[MAX_HAND];
        -:   42:    // int temphand[MAX_HAND];  // stores drawn non-treasure cards
        -:   43:    // memcpy(handBefore, state.hand[currentPlayer], sizeof(state.hand[currentPlayer]));
        -:   44:    
        -:   45:    // for(i = 0; i < state.handCount[currentPlayer]; i++) {
        -:   46:    //     failedTests += (state.hand[currentPlayer][i] != handBefore[i]);
        -:   47:    // }
        -:   48:    
        2:   49:    int handCountBefore = numHandCards(&state);
call    0 returned 100%
        2:   50:    int deckTreasureBefore = countDeckTreasure(&state);
call    0 returned 100%
        2:   51:    printf("\tplay adventurer successfully executes:\n");
call    0 returned 100%
        2:   52:    fflush(stdout); 
call    0 returned 100%
        2:   53:    int played =  (cardEffect(adventurer, choice1, choice2, choice3, &state, handPos, &bonus) == 0);
call    0 returned 100%
        2:   54:    asserttrue(played);
call    0 returned 100%
        2:   55:    int handCountAfter = numHandCards(&state);
call    0 returned 100%
        -:   56:    
        2:   57:    printf("\tcorrect number of cards in hand:\n");
call    0 returned 100%
        2:   58:    fflush(stdout);     
call    0 returned 100%
        2:   59:    int cardsToDraw = (deckTreasureBefore > 2) ? 2: deckTreasureBefore;
        2:   60:    asserttrue((handCountAfter - handCountBefore) == cardsToDraw);
call    0 returned 100%
        -:   61:
        2:   62:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   63:	
        2:   64:    return 0;
        -:   65:}
        -:   66:
        -:   67:
        -:   68:
        -:   69:// adding own asserttrue as recommended
function asserttrue called 4 returned 100% blocks executed 67%
        4:   70:void asserttrue(int statement) {
        4:   71:    if (statement) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   72:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
        4:   73:        fflush(stdout);
call    0 returned 100%
        -:   74:    } else {
    #####:   75:        printf("\t\tTest failed.\n");
call    0 never executed
    #####:   76:        fflush(stdout);
call    0 never executed
        -:   77:    }
        4:   78:}
        -:   79:
        -:   80:
        -:   81:
        -:   82:// int deckStateTest(struct gameState* post, struct gameState* pre) {
        -:   83://     // for adventurer
        -:   84:    
        -:   85://     int currentPlayer = whoseTurn(pre);
        -:   86://     // initial indices
        -:   87://     int preHandCount = pre->handCount[currentPlayer]
        -:   88://     int preDiscardCount = pre->discardCount[currentPlayer];
        -:   89:    
        -:   90://     // iterate through pre until reaches 0 or two treasures
        -:   91://     int i = preHandCount;
        -:   92://     int treasureCount = 0;
        -:   93://     int endHandCount = preHandCount;
        -:   94://     while(i >= 0 && treasureCount < 2) {
        -:   95://         if
        -:   96://     }
        -:   97:// }
        -:   98:
        -:   99:// counts the treasure that can be drawn, taken from my random tests
function countDeckTreasure called 2 returned 100% blocks executed 100%
        2:  100:int countDeckTreasure(struct gameState *state) {
        2:  101:    int count = 0;
        -:  102:
        -:  103:    int i;
       12:  104:    for (i = 0; i < state->deckCount[state->whoseTurn]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  105:        // test if treasure
       10:  106:        switch(state->deck[state->whoseTurn][i]) {
branch  0 taken 60%
branch  1 taken 40%
        -:  107:            case copper:
        -:  108:            case silver:
        -:  109:            case gold:
        6:  110:                count++;
        -:  111:        }
        -:  112:    }
        -:  113:    
        2:  114:    return count;
        -:  115:}
        -:  116:
File 'cardtest3.c'
Lines executed:95.24% of 42
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:91.67% of 24
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "interface.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// testing embargo card
        -:    9:
        -:   10:void asserttrue(int statement);
        -:   11:
        -:   12:
function main called 3 returned 100% blocks executed 100%
        3:   13:int main(int argc, char* argv[]) {
        3:   14:    char functionName[] = "embargo card";
        -:   15:    struct gameState state;
        3:   16:    int players = 2;
        3:   17:    int seed = 100;
        3:   18:    int choice1 = 0;    
        3:   19:    int choice2 = 0;    // not used for embargo
        3:   20:    int choice3 = 0;    // not used for embargo
        3:   21:    int handPos = 0;    
        3:   22:    int bonus = 0;      // not used for embargo
        3:   23:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   24:		sea_hag, tribute, smithy};
        3:   25:	printf("____________________________________________________\n");
call    0 returned 100%
        3:   26:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        3:   27:	fflush(stdout);
call    0 returned 100%
        -:   28:    
        -:   29:    // init game
        3:   30:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   31:
        -:   32:    // What is the expected behavior??
        -:   33:    //  +1 embargo token
        -:   34:    //  -1 in hand (from trashing card)
        -:   35:    //  +2 coins 
        -:   36:    
        3:   37:    int embargoCountBefore = state.embargoTokens[choice1];
        3:   38:    int handCountBefore = numHandCards(&state);
call    0 returned 100%
        3:   39:    int cointCountBefore = state.coins;
        -:   40:
        3:   41:    printf("\tplay embargo successfully executes:\n");
call    0 returned 100%
        3:   42:    fflush(stdout); 
call    0 returned 100%
        3:   43:    int played =  (cardEffect(embargo, choice1, choice2, choice3, &state, handPos, &bonus) == 0);
call    0 returned 100%
        3:   44:    asserttrue(played);
call    0 returned 100%
        3:   45:    int embargoCountAfter = state.embargoTokens[choice1];
        3:   46:    int handCountAfter = numHandCards(&state);
call    0 returned 100%
        3:   47:    int cointCountAfter = state.coins;
        -:   48: 
        3:   49:    printf("\tcorrect number of embargo tokens:\n");
call    0 returned 100%
        3:   50:    fflush(stdout);     
call    0 returned 100%
        3:   51:    asserttrue((embargoCountAfter - embargoCountBefore) == 1);
call    0 returned 100%
        -:   52:    
        3:   53:    printf("\tcorrect number of cards in hand:\n");
call    0 returned 100%
        3:   54:    fflush(stdout);     
call    0 returned 100%
        3:   55:    asserttrue((handCountBefore - handCountAfter) == 1);
call    0 returned 100%
        -:   56:
        3:   57:    printf("\tcorrect number of coins:\n");
call    0 returned 100%
        3:   58:    fflush(stdout);     
call    0 returned 100%
        3:   59:    asserttrue((cointCountAfter - cointCountBefore) == 2);
call    0 returned 100%
        -:   60:
        3:   61:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   62:	
        3:   63:    return 0;
        -:   64:}
        -:   65:
        -:   66:
        -:   67:
        -:   68:// adding own asserttrue as recommended
function asserttrue called 12 returned 100% blocks executed 67%
       12:   69:void asserttrue(int statement) {
       12:   70:    if (statement) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12:   71:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
       12:   72:        fflush(stdout);
call    0 returned 100%
        -:   73:    } else {
    #####:   74:        printf("\t\tTest failed.\n");
call    0 never executed
    #####:   75:        fflush(stdout);
call    0 never executed
        -:   76:    }
       12:   77:}
File 'cardtest4.c'
Lines executed:94.59% of 37
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:90.48% of 21
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "interface.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// testing great hall card
        -:    9:
        -:   10:void asserttrue(int statement);
        -:   11:
        -:   12:
function main called 3 returned 100% blocks executed 100%
        3:   13:int main(int argc, char* argv[]) {
        3:   14:    char functionName[] = "great hall card";
        -:   15:    struct gameState state;
        3:   16:    int players = 2;
        3:   17:    int seed = 100;
        3:   18:    int choice1 = 0;    // not used for great hall
        3:   19:    int choice2 = 0;    // not used for great hall
        3:   20:    int choice3 = 0;    // not used for great hall
        3:   21:    int handPos = 0;    
        3:   22:    int bonus = 0;      // not used for great hall
        3:   23:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   24:		sea_hag, tribute, smithy};
        3:   25:	printf("____________________________________________________\n");
call    0 returned 100%
        3:   26:	printf("Testing %s\n\n", functionName);
call    0 returned 100%
        3:   27:	fflush(stdout);
call    0 returned 100%
        -:   28:    
        -:   29:    // init game
        3:   30:    initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   31:
        -:   32:    // What is the expected behavior??
        -:   33:    //  +1 card
        -:   34:    //  +1 action
        -:   35:    
        3:   36:    int handCountBefore = numHandCards(&state);
call    0 returned 100%
        3:   37:    int actionCountBefore = state.numActions;
        -:   38:
        3:   39:    printf("\tplay great hall successfully executes:\n");
call    0 returned 100%
        3:   40:    fflush(stdout); 
call    0 returned 100%
        3:   41:    int played =  (cardEffect(great_hall, choice1, choice2, choice3, &state, handPos, &bonus) == 0);
call    0 returned 100%
        3:   42:    asserttrue(played);
call    0 returned 100%
        3:   43:    int handCountAfter = numHandCards(&state);
call    0 returned 100%
        3:   44:    int actionCountAfter = state.numActions;
        -:   45:    
        3:   46:    printf("\tcorrect number of cards in hand:\n");
call    0 returned 100%
        3:   47:    fflush(stdout);
call    0 returned 100%
        -:   48:    // +1 new card, -1 discard, net 0
        3:   49:    asserttrue((handCountBefore - handCountAfter) == 0);
call    0 returned 100%
        -:   50:
        3:   51:    printf("\tcorrect number of actions:\n");
call    0 returned 100%
        3:   52:    fflush(stdout);     
call    0 returned 100%
        3:   53:    asserttrue((actionCountAfter - actionCountBefore) == 1);
call    0 returned 100%
        -:   54:
        3:   55:	printf("____________________________________________________\n");
call    0 returned 100%
        -:   56:	
        3:   57:    return 0;
        -:   58:}
        -:   59:
        -:   60:
        -:   61:
        -:   62:// adding own asserttrue as recommended
function asserttrue called 9 returned 100% blocks executed 67%
        9:   63:void asserttrue(int statement) {
        9:   64:    if (statement) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        9:   65:        printf("\t\tTest successfully completed.\n");
call    0 returned 100%
        9:   66:        fflush(stdout);
call    0 returned 100%
        -:   67:    } else {
    #####:   68:        printf("\t\tTest failed.\n");
call    0 never executed
    #####:   69:        fflush(stdout);
call    0 never executed
        -:   70:    }
        9:   71:}
File 'dominion.c'
Lines executed:35.56% of 568
Branches executed:35.56% of 419
Taken at least once:26.73% of 419
Calls executed:19.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:58
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 990570 returned 100% blocks executed 83%
   990570:    8:int compare(const void* a, const void* b) {
   990570:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
   990570:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   264152:   12:    return -1;
   726418:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 3 returned 100% blocks executed 100%
        3:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        3:   23:  int* k = malloc(10 * sizeof(int));
        3:   24:  k[0] = k1;
        3:   25:  k[1] = k2;
        3:   26:  k[2] = k3;
        3:   27:  k[3] = k4;
        3:   28:  k[4] = k5;
        3:   29:  k[5] = k6;
        3:   30:  k[6] = k7;
        3:   31:  k[7] = k8;
        3:   32:  k[8] = k9;
        3:   33:  k[9] = k10;
        3:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 33019 returned 100% blocks executed 88%
    33019:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    33019:   44:  SelectStream(1);
call    0 returned 100%
    33019:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    33019:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    33019:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   363209:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  3632090:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  3301900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    33019:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
    33019:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    33019:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
    33019:   89:      state->supplyCount[estate] = 8;
    33019:   90:      state->supplyCount[duchy] = 8;
    33019:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    33019:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    33019:  102:  state->supplyCount[silver] = 40;
    33019:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   693399:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  5448135:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  5117945:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   330190:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
    66038:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    33019:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   297171:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   330190:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  4787755:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    99057:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
    66038:  140:      state->deckCount[i] = 0;
   264152:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
   198114:  143:	  state->deck[i][j] = estate;
   198114:  144:	  state->deckCount[i]++;
        -:  145:	}
   528304:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   462266:  148:	  state->deck[i][j] = copper;
   462266:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    99057:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
    66038:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    99057:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    66038:  166:      state->handCount[i] = 0;
    66038:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   924532:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   891513:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    33019:  182:  state->outpostPlayed = 0;
    33019:  183:  state->phase = 0;
    33019:  184:  state->numActions = 1;
    33019:  185:  state->numBuys = 1;
    33019:  186:  state->playedCardCount = 0;
    33019:  187:  state->whoseTurn = 0;
    33019:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   198114:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   165095:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
    33019:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
    33019:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 66038 returned 100% blocks executed 94%
    66038:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    66038:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    66038:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
    66038:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   792456:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   660380:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   660380:  216:    newDeck[newDeckPos] = state->deck[player][card];
   660380:  217:    newDeckPos++;
  2148381:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
  1488001:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   660380:  221:    state->deckCount[player]--;
        -:  222:  }
   726418:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   660380:  224:    state->deck[player][i] = newDeck[i];
   660380:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    66038:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 66024 returned 100% blocks executed 100%
    66024:  311:int numHandCards(struct gameState *state) {
    66024:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 81 returned 100% blocks executed 100%
       81:  320:int supplyCount(int card, struct gameState *state) {
       81:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 124042 returned 100% blocks executed 100%
   124042:  346:int whoseTurn(struct gameState *state) {
   124042:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 12 returned 100% blocks executed 100%
       12:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       12:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        4:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        4:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 239302 returned 100% blocks executed 38%
   239302:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   239302:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   239302:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   239302:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   239302:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   239302:  576:    state->deckCount[player]--;
   239302:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   239302:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 87 returned 100% blocks executed 100%
       87:  583:int getCost(int cardNumber)
        -:  584:{
       87:  585:  switch( cardNumber ) 
branch  0 taken 7%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 3%
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        3:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        3:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        3:  610:      return 5;
        -:  611:    case remodel:
        3:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        3:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
        3:  640:      return 4;
        -:  641:    }
        -:  642:	
        3:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 33012 returned 100% blocks executed 7%
    33012:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    33012:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    33012:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    33012:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:
    33012:  659:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  660:    nextPlayer = 0;
        -:  661:  }
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
    33012:  664:  switch( card ) 
branch  0 taken 9%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 67%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 24%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:    {
        -:  666:    case adventurer:
     3003:  667:        return adventurerEffect( state );
call    0 returned 100%
        -:  668:			
        -:  669:    case council_room:
    #####:  670:        return councilRoomEffect( handPos, state );
call    0 never executed
        -:  671:			
        -:  672:    case feast:
        -:  673:      //gain card with cost up to 5
        -:  674:      //Backup hand
    #####:  675:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  676:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  677:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  678:      }
        -:  679:      //Backup hand
        -:  680:
        -:  681:      //Update Coins for Buy
    #####:  682:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  683:      x = 1;//Condition to loop on
    #####:  684:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  685:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  686:	  if (DEBUG)
        -:  687:	    printf("None of that card left, sorry!\n");
        -:  688:
        -:  689:	  if (DEBUG){
        -:  690:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  691:	  }
        -:  692:	}
    #####:  693:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  694:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  698:	  }
        -:  699:	}
        -:  700:	else{
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  704:	  }
        -:  705:
    #####:  706:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  707:	  x = 0;//No more buying cards
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
        -:  713:	}
        -:  714:      }     
        -:  715:
        -:  716:      //Reset Hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:	state->hand[currentPlayer][i] = temphand[i];
    #####:  719:	temphand[i] = -1;
        -:  720:      }
        -:  721:      //Reset Hand
        -:  722:      			
    #####:  723:      return 0;
        -:  724:			
        -:  725:    case gardens:
    #####:  726:      return -1;
        -:  727:			
        -:  728:    case mine:
    #####:  729:        return mineEffect( handPos, choice1, choice2, state );
call    0 never executed
        -:  730:
        -:  731:    case remodel:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  740:
        -:  741:      //discard card from hand
    #####:  742:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  743:
        -:  744:      //discard trashed card
    #####:  745:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  746:	{
    #####:  747:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  748:	    {
    #####:  749:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  750:	      break;
        -:  751:	    }
        -:  752:	}
        -:  753:
    #####:  754:      return 0;
        -:  755:		
        -:  756:    case smithy:
    22003:  757:        return smithyEffect( handPos, state );
call    0 returned 100%
        -:  758:	
        -:  759:    case village:
    #####:  760:        return villageEffect( handPos, state );
call    0 never executed
        -:  761:
        -:  762:    case baron:
    #####:  763:      state->numBuys++;//Increase buys by 1!
    #####:  764:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  765:	int p = 0;//Iterator for hand!
    #####:  766:	int card_not_discarded = 1;//Flag for discard set!
    #####:  767:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  768:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  769:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  770:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  771:	    state->discardCount[currentPlayer]++;
    #####:  772:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  773:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  774:	    }
    #####:  775:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  776:	    state->handCount[currentPlayer]--;
    #####:  777:	    card_not_discarded = 0;//Exit the loop
        -:  778:	  }
    #####:  779:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  780:	    if(DEBUG) {
        -:  781:	      printf("No estate cards in your hand, invalid choice\n");
        -:  782:	      printf("Must gain an estate if there are any\n");
        -:  783:	    }
    #####:  784:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  785:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  786:	      state->supplyCount[estate]--;//Decrement estates
    #####:  787:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  788:		isGameOver(state);
call    0 never executed
        -:  789:	      }
        -:  790:	    }
    #####:  791:	    card_not_discarded = 0;//Exit the loop
        -:  792:	  }
        -:  793:			    
        -:  794:	  else{
    #####:  795:	    p++;//Next card
        -:  796:	  }
        -:  797:	}
        -:  798:      }
        -:  799:			    
        -:  800:      else{
    #####:  801:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  803:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  804:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  805:	    isGameOver(state);
call    0 never executed
        -:  806:	  }
        -:  807:	}
        -:  808:      }
        -:  809:	    
        -:  810:      
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case great_hall:
        -:  814:      //+1 Card
        3:  815:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  816:			
        -:  817:      //+1 Actions
        3:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
        3:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  822:      return 0;
        -:  823:		
        -:  824:    case minion:
        -:  825:      //+1 action
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  830:			
    #####:  831:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  832:	{
    #####:  833:	  state->coins = state->coins + 2;
        -:  834:	}
        -:  835:			
    #####:  836:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  837:	{
        -:  838:	  //discard hand
    #####:  839:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  840:	    {
    #####:  841:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  842:	    }
        -:  843:				
        -:  844:	  //draw 4
    #####:  845:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  846:	    {
    #####:  847:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  848:	    }
        -:  849:				
        -:  850:	  //other players discard hand and redraw if hand size > 4
    #####:  851:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  852:	    {
    #####:  853:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  854:		{
    #####:  855:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  856:		    {
        -:  857:		      //discard hand
    #####:  858:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  859:			{
    #####:  860:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  861:			}
        -:  862:							
        -:  863:		      //draw 4
    #####:  864:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  865:			{
    #####:  866:			  drawCard(i, state);
call    0 never executed
        -:  867:			}
        -:  868:		    }
        -:  869:		}
        -:  870:	    }
        -:  871:				
        -:  872:	}
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case steward:
    #####:  876:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  877:	{
        -:  878:	  //+2 cards
    #####:  879:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  880:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  881:	}
    #####:  882:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  883:	{
        -:  884:	  //+2 coins
    #####:  885:	  state->coins = state->coins + 2;
        -:  886:	}
        -:  887:      else
        -:  888:	{
        -:  889:	  //trash 2 cards in hand
    #####:  890:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  891:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  892:	}
        -:  893:			
        -:  894:      //discard card from hand
    #####:  895:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case tribute:
    #####:  899:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  900:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  901:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  902:	  state->deckCount[nextPlayer]--;
        -:  903:	}
    #####:  904:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  906:	  state->discardCount[nextPlayer]--;
        -:  907:	}
        -:  908:	else{
        -:  909:	  //No Card to Reveal
        -:  910:	  if (DEBUG){
        -:  911:	    printf("No cards to reveal\n");
        -:  912:	  }
        -:  913:	}
        -:  914:      }
        -:  915:	    
        -:  916:      else{
    #####:  917:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  918:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  919:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  920:	    state->deckCount[nextPlayer]++;
    #####:  921:	    state->discard[nextPlayer][i] = -1;
    #####:  922:	    state->discardCount[nextPlayer]--;
        -:  923:	  }
        -:  924:			    
    #####:  925:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  926:	} 
    #####:  927:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
    #####:  930:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  932:	state->deckCount[nextPlayer]--;
        -:  933:      }    
        -:  934:		       
    #####:  935:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  936:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  937:	state->playedCardCount++;
    #####:  938:	tributeRevealedCards[1] = -1;
        -:  939:      }
        -:  940:
    #####:  941:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  943:	  state->coins += 2;
        -:  944:	}
        -:  945:		    
    #####:  946:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  947:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  948:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  949:	}
        -:  950:	else{//Action Card
    #####:  951:	  state->numActions = state->numActions + 2;
        -:  952:	}
        -:  953:      }
        -:  954:	    
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case ambassador:
    #####:  958:      j = 0;		//used to check if player has enough cards to discard
        -:  959:
    #####:  960:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  961:	{
    #####:  962:	  return -1;				
        -:  963:	}
        -:  964:
    #####:  965:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  return -1;
        -:  968:	}
        -:  969:
    #####:  970:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  971:	{
    #####:  972:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  973:	    {
    #####:  974:	      j++;
        -:  975:	    }
        -:  976:	}
    #####:  977:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  978:	{
    #####:  979:	  return -1;				
        -:  980:	}
        -:  981:
        -:  982:      if (DEBUG) 
        -:  983:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  984:
        -:  985:      //increase supply count for choosen card by amount being discarded
    #####:  986:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  987:			
        -:  988:      //each other player gains a copy of revealed card
    #####:  989:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	{
    #####:  991:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  992:	    {
    #####:  993:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  994:	    }
        -:  995:	}
        -:  996:
        -:  997:      //discard played card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  999:
        -: 1000:      //trash copies of cards returned to supply
    #####: 1001:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1002:	{
    #####: 1003:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	    {
    #####: 1005:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1006:		{
    #####: 1007:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1008:		  break;
        -: 1009:		}
        -: 1010:	    }
        -: 1011:	}			
        -: 1012:
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case cutpurse:
        -: 1016:
    #####: 1017:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1018:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1021:	    {
    #####: 1022:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1023:		{
    #####: 1024:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1025:		    {
    #####: 1026:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1027:		      break;
        -: 1028:		    }
    #####: 1029:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1030:		    {
    #####: 1031:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1032:			{
        -: 1033:			  if (DEBUG)
        -: 1034:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1035:			}	
    #####: 1036:		      break;
        -: 1037:		    }		
        -: 1038:		}
        -: 1039:					
        -: 1040:	    }
        -: 1041:				
        -: 1042:	}				
        -: 1043:
        -: 1044:      //discard played card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:
        -: 1049:		
        -: 1050:    case embargo: 
        -: 1051:      //+2 Coins
     8003: 1052:      state->coins = state->coins + 2;
        -: 1053:			
        -: 1054:      //see if selected pile is in play
     8003: 1055:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -: 1056:	{
     2780: 1057:	  return -1;
        -: 1058:	}
        -: 1059:			
        -: 1060:      //add embargo token to selected supply pile
     5223: 1061:      state->embargoTokens[choice1]++;
        -: 1062:			
        -: 1063:      //trash card
     5223: 1064:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
     5223: 1065:      return 0;
        -: 1066:		
        -: 1067:    case outpost:
        -: 1068:      //set outpost flag
    #####: 1069:      state->outpostPlayed++;
        -: 1070:			
        -: 1071:      //discard card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case salvager:
        -: 1076:      //+1 buy
    #####: 1077:      state->numBuys++;
        -: 1078:			
    #####: 1079:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1080:	{
        -: 1081:	  //gain coins equal to trashed card
    #####: 1082:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1083:	  //trash card
    #####: 1084:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1085:	}
        -: 1086:			
        -: 1087:      //discard card
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case sea_hag:
    #####: 1092:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1094:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1095:      state->deckCount[i]--;
    #####: 1096:	  state->discardCount[i]++;
    #####: 1097:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1098:	}
        -: 1099:      }
    #####: 1100:      return 0;
        -: 1101:		
        -: 1102:    case treasure_map:
        -: 1103:      //search hand for another treasure_map
    #####: 1104:      index = -1;
    #####: 1105:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1108:	    {
    #####: 1109:	      index = i;
    #####: 1110:	      break;
        -: 1111:	    }
        -: 1112:	}
    #####: 1113:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
        -: 1115:	  //trash both treasure cards
    #####: 1116:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1117:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1118:
        -: 1119:	  //gain 4 Gold cards
    #####: 1120:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1121:	    {
    #####: 1122:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1123:	    }
        -: 1124:				
        -: 1125:	  //return success
    #####: 1126:	  return 1;
        -: 1127:	}
        -: 1128:			
        -: 1129:      //no second treasure_map found in hand
    #####: 1130:      return -1;
        -: 1131:    }
        -: 1132:	
    #####: 1133:  return -1;
        -: 1134:}
        -: 1135:
function discardCard called 27229 returned 100% blocks executed 78%
    27229: 1136:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1137:{
        -: 1138:	
        -: 1139:  //if card is not trashed, added to Played pile 
    27229: 1140:  if (trashFlag < 1)
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
        -: 1141:    {
        -: 1142:      //add card to played pile
    22006: 1143:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    22006: 1144:      state->playedCardCount++;
        -: 1145:    }
        -: 1146:	
        -: 1147:  //set played card to -1
    27229: 1148:  state->hand[currentPlayer][handPos] = -1;
        -: 1149:	
        -: 1150:  //remove card from player's hand
    27229: 1151:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1152:    {
        -: 1153:      //reduce number of cards in hand
    #####: 1154:      state->handCount[currentPlayer]--;
        -: 1155:    }
    27229: 1156:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1157:    {
        -: 1158:      //reduce number of cards in hand
    #####: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:  else 	
        -: 1162:    {
        -: 1163:      //replace discarded card with last card in hand
    27229: 1164:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1165:      //set last card to -1
    27229: 1166:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1167:      //reduce number of cards in hand
    27229: 1168:      state->handCount[currentPlayer]--;
        -: 1169:    }
        -: 1170:	
    27229: 1171:  return 0;
        -: 1172:}
        -: 1173:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1174:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1175:{
        -: 1176:  //Note: supplyPos is enum of choosen card
        -: 1177:	
        -: 1178:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1179:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1180:    {
    #####: 1181:      return -1;
        -: 1182:    }
        -: 1183:	
        -: 1184:  //added card for [whoseTurn] current player:
        -: 1185:  // toFlag = 0 : add to discard
        -: 1186:  // toFlag = 1 : add to deck
        -: 1187:  // toFlag = 2 : add to hand
        -: 1188:
    #####: 1189:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1190:    {
    #####: 1191:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1192:      state->deckCount[player]++;
        -: 1193:    }
    #####: 1194:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1195:    {
    #####: 1196:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1197:      state->handCount[player]++;
        -: 1198:    }
        -: 1199:  else
        -: 1200:    {
    #####: 1201:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1202:      state->discardCount[player]++;
        -: 1203:    }
        -: 1204:	
        -: 1205:  //decrease number in supply pile
    #####: 1206:  state->supplyCount[supplyPos]--;
        -: 1207:	 
    #####: 1208:  return 0;
        -: 1209:}
        -: 1210:
function updateCoins called 33019 returned 100% blocks executed 82%
    33019: 1211:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1212:{
        -: 1213:  int i;
        -: 1214:	
        -: 1215:  //reset coin count
    33019: 1216:  state->coins = 0;
        -: 1217:
        -: 1218:  //add coins for each Treasure card in player's hand
   198114: 1219:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1220:    {
   165095: 1221:      if (state->hand[player][i] == copper)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1222:	{
   115537: 1223:	  state->coins += 1;
        -: 1224:	}
    49558: 1225:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1226:	{
    #####: 1227:	  state->coins += 2;
        -: 1228:	}
    49558: 1229:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1230:	{
    #####: 1231:	  state->coins += 3;
        -: 1232:	}	
        -: 1233:    }	
        -: 1234:
        -: 1235:  //add bonus
    33019: 1236:  state->coins += bonus;
        -: 1237:
    33019: 1238:  return 0;
        -: 1239:}
        -: 1240:
        -: 1241://
        -: 1242:// CARD EFFECT HELPER FUNCTIONS:
        -: 1243://
        -: 1244:
        -: 1245:
        -: 1246:// adventurerEffect(): implementation of Adventurer card: 
        -: 1247:// Card Effect: Reveal 2 cards from deck until 2 Treasures revealed, put those
        -: 1248:// into hand, and discard other cards.
        -: 1249:// Receives: state, a pointer to a gameState struct
        -: 1250:// Returns: 0 on success (card effect successfully applied).
        -: 1251:// Preconditions: gameState has been initialized with initializeGame() 
        -: 1252:// Postconditions: 
        -: 1253://      -   the first two treasure cards in the current player's deck 
        -: 1254://          have been added to their hand ( state->hand[currentPlayer][] ); if
        -: 1255://          two treasure cards were not found in the deck, the discard pile has
        -: 1256://          been reshuffled and returned to the deck.
        -: 1257://      -   any other cards drawn from the deck to reach those treasure
        -: 1258://          have been placed in the current player's discard pile 
        -: 1259://          (state->discard[currentPlayer][]).
        -: 1260:// NOTE: there is an existing (pre-assignment) bug here: we assume that the
        -: 1261:// player has two or more Treasure cards in their deck -> if only one Treasure
        -: 1262:// in deck, infinite loop.
        -: 1263:// NOTE: another pre-assignment bug: card not discarded from player's hand after
        -: 1264:// playing it.
        -: 1265:
function adventurerEffect called 3003 returned 100% blocks executed 100%
     3003: 1266:int adventurerEffect(struct gameState* state) {
        -: 1267:
     3003: 1268:    int drawntreasure = 0;   // counter  for treasure cards drawn
     3003: 1269:    int z = 0;    // counter for temphand
        -: 1270:    int temphand[MAX_HAND];  // stores drawn non-treasure cards
        -: 1271:    int cardDrawn;          // will store the current card drawn
     3003: 1272:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1273:
    14201: 1274:    while(drawntreasure < 2) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -: 1275:
        -: 1276:        // draw a card from the deck
     8195: 1277:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1278:        
        -: 1279:        //top card of hand is most recently drawn card.
     8195: 1280:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -: 1281:        
     8195: 1282:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     6006: 1283:            drawntreasure++;
        -: 1284:        else{
     2189: 1285:            temphand[z]=cardDrawn;
        -: 1286:            //this should just remove the top card (the most recently drawn one).
     2189: 1287:            state->handCount[currentPlayer]--; 
     2189: 1288:            z++;
        -: 1289:        }
        -: 1290:    }
        -: 1291:
        -: 1292:    // discard all cards in play that have been drawn
     8195: 1293:    while(z > 0){
branch  0 taken 42%
branch  1 taken 58% (fallthrough)
        -: 1294:        // added bug here: should be temphand[z - 1]
     2189: 1295:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z]; 
     2189: 1296:        z = z - 1;
        -: 1297:    }
        -: 1298:
     3003: 1299:    return 0;   // returns 0 on success
        -: 1300:}
        -: 1301:
        -: 1302:// Name: councilRoomEffect(): Implementation of the effect of the Council Room card
        -: 1303:// Card Effect: Draw 4 cards; all other players may draw 1 card. 
        -: 1304:// Receives: state, a pointer to an initialized gameState struct.
        -: 1305:// Returns: 0 on success (card effect successfully applied).
        -: 1306:// Preconditions: gameState must have been initialized with initializeGame.
        -: 1307:// Postconditions: 
        -: 1308://      - the player's hand (state->hand[currentPlayer][]) contains four more cards,
        -: 1309://        drawn from their deck (state->deck[currentPlayer][]).
        -: 1310:// NOTE: existing bug: draw step assumes that there are four cards in the
        -: 1311://       player's deck / discard pile.
        -: 1312:
function councilRoomEffect called 0 returned 0% blocks executed 0%
    #####: 1313:int councilRoomEffect( int handPos, struct gameState *state ) {
        -: 1314:
        -: 1315:    int i;  // card counter
    #####: 1316:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1317:
        -: 1318:    //draw +4 Cards
    #####: 1319:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1320:	{
    #####: 1321:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1322:	}
        -: 1323:			
    #####: 1324:    state->numBuys++;   //+1 Buy
        -: 1325:			
        -: 1326:    //Each other player draws a card
    #####: 1327:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1328:	{
    #####: 1329:	    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1330:	    {
    #####: 1331:	        drawCard(i, state);
call    0 never executed
        -: 1332:	    }
        -: 1333:	}
        -: 1334:			
        -: 1335:    //put played card in played card pile
        -: 1336:    // bug: should be discardCard handPos
    #####: 1337:    discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1338:    return 0;
        -: 1339:
        -: 1340:}
        -: 1341:
        -: 1342:// name: smithyEffect(): Implementation of the effect of the Smithy card.
        -: 1343:// Card Effect: Player draws three cards.
        -: 1344:// Receives: handPos, an int representing the position of the card in the 
        -: 1345:// player's hand; state, a pointer to an initialized gameState struct.
        -: 1346:// Returns: 0 on success (card effect successfully applied).
        -: 1347:// Preconditions: gameState must have been initialized with initializeGame.
        -: 1348:// Postconditions: 
        -: 1349://      - the player's hand (state->hand[currentPlayer][]) contains three more cards,
        -: 1350://        drawn from their deck (state->deck[currentPlayer][]). 
        -: 1351:
function smithyEffect called 22003 returned 100% blocks executed 86%
    22003: 1352:int smithyEffect(int handPos, struct gameState *state) {
        -: 1353:
        -: 1354:    int i;  // card counter
    22003: 1355:    int currentPlayer = whoseTurn(state);   // get current player
call    0 returned 100%
    22003: 1356:    int drawCount = 0;
        -: 1357:
        -: 1358:    //+3 Cards
    88012: 1359:    for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1360:	{
        -: 1361:        // bug count number of cards successfully drawn
    66009: 1362:        if( drawCard(currentPlayer, state) >= 0 ) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
    66009: 1363:            drawCount++;
        -: 1364:        }
        -: 1365:	}
        -: 1366:
        -: 1367:    // bug: adding copper to hand if the deck+discard aren't big enough
    44006: 1368:    while( drawCount < 3 ) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1369:        gainCard(copper, state, 2, currentPlayer);
call    0 never executed
    #####: 1370:        drawCount++;
        -: 1371:    }
        -: 1372:			
        -: 1373:    //discard card from hand
    22003: 1374:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1375:
    22003: 1376:    return 0;
        -: 1377:}
        -: 1378:
        -: 1379:// name: mineEffect(): Implementation of the effect of the Mine card
        -: 1380:// Card Effect: Player may trash a Treasure card in their hand, gaining 
        -: 1381:// a card from the Supply with cost <= 3 + cost of trashed card.
        -: 1382:// Receives: handPos, an int representing the position of the card in the 
        -: 1383:// player's hand; trashChoice, an int representing the card the player wishes to
        -: 1384:// trash (the index of the card in the player's hand); gainChoice, an int 
        -: 1385:// representing the card the player wishes to gain (as an enum value defined in
        -: 1386:// dominion.h); state, a pointer to an initialized gameState struct.
        -: 1387:// Returns: 0 on success, -1 on failure.
        -: 1388:// Preconditions: gameState must have been initialized with initializeGame. handPos
        -: 1389:// must be a valid position in the player's hand.
        -: 1390:// Postconditions: 
        -: 1391://      - If the player has supplied an incorrect number for the card to be trashed, 
        -: 1392://        the card to be gained, or if the value of the card the player wishes to gain
        -: 1393://        exceeds 3 + the cost of the trashed card, the function has returned -1.
        -: 1394://      - Otherwise, player's hand (state->hand[currentPlayer][]) contains an additional 
        -: 1395://        card selected by the player. The played card has been placed in the player's 
        -: 1396://        discard pile (state->discard[currentPlayer][]).
        -: 1397:// NOTE: there is an existing bug here - the 'trashed' card is simply returned to 
        -: 1398:// the discard pile ('trash' flag is not set in discardCard call).
        -: 1399:
function mineEffect called 0 returned 0% blocks executed 0%
    #####: 1400:int mineEffect( int handPos, int trashChoice, int gainChoice, struct gameState* state ) {
        -: 1401:    
        -: 1402:    int i;  // counter for trashing card
        -: 1403:
    #####: 1404:    int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1405:    int j = state->hand[currentPlayer][trashChoice];  //store card we will trash
        -: 1406:
        -: 1407:    // if player isn't trashing a Treasure card, return failure
    #####: 1408:    if (    state->hand[currentPlayer][trashChoice] < copper ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1409:            state->hand[currentPlayer][trashChoice] > gold )
        -: 1410:	{
    #####: 1411:	  return -1;
        -: 1412:	}
        -: 1413:	
        -: 1414:    // if index of card to gain isn't in bounds, return failure
        -: 1415:    // bug: should be gainChoice
    #####: 1416:    if (trashChoice > treasure_map || trashChoice < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1417:	{
    #####: 1418:	  return -1;
        -: 1419:	}
        -: 1420:
        -: 1421:    // if cost of card to gain is higher than 3 + cost of trashed card, return failure
    #####: 1422:    if ( (getCost(state->hand[currentPlayer][trashChoice]) + 3) > getCost(gainChoice) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1423:	{
    #####: 1424:	  return -1;
        -: 1425:	}
        -: 1426:
        -: 1427:    // add chosen card
    #####: 1428:    gainCard(gainChoice, state, 2, currentPlayer);
call    0 never executed
        -: 1429:
        -: 1430:    //discard played card from hand
    #####: 1431:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1432:
        -: 1433:    //discard trashed card
    #####: 1434:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1435:    {
    #####: 1436:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1437:        {
    #####: 1438:          discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1439:          break;
        -: 1440:        }
        -: 1441:    }
        -: 1442:        
    #####: 1443:    return 0;
        -: 1444:
        -: 1445:}
        -: 1446:
        -: 1447:// Name: villageEffect(): implementation of the effect of the Village card.
        -: 1448:// Card Effect: Player draws one card, and adds two additional actions.
        -: 1449:// Receives: handPos, an int representing the position of the card in the player's 
        -: 1450:// hand; gameState, a pointer to a struct storing the current state of the game.
        -: 1451:// Returns: 0 on success (card effect successfully applied).
        -: 1452:// Preconditions: gameState must have been initialized with initializeGame(); 
        -: 1453:// handPos must be a valid position in the player's hand.
        -: 1454:// Postconditions: 
        -: 1455://      -   An additional card has been drawn from the player's deck
        -: 1456://          ( state->deck[currentPlayer][] )
        -: 1457://      -   Two actions have been added to the player's
        -: 1458://          turn; the played card has been discarded.
        -: 1459:
function villageEffect called 0 returned 0% blocks executed 0%
    #####: 1460:int villageEffect( int handPos, struct gameState* state ) {
        -: 1461:
    #####: 1462:    int currentPlayer = whoseTurn(state);   // get current player
call    0 never executed
        -: 1463:
        -: 1464:    //+1 Card
    #####: 1465:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1466:        
        -: 1467:    //+2 Actions
    #####: 1468:    state->numActions = state->numActions + 2;
        -: 1469:        
        -: 1470:    //discard played card from hand
    #####: 1471:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1472:
    #####: 1473:    return 0;
        -: 1474:
        -: 1475:}		
        -: 1476:
        -: 1477://end of dominion.c
        -: 1478:
